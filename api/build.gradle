import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.openapi.generator' version '7.5.0'
}

group = 'org.bbakaple'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(path: ':app')
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0' // Swagger
    implementation platform("com.fasterxml.jackson:jackson-bom:2.15.2") // 원하는 Jackson 버전으로 변경
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(17)
}

// OpenAPI Generator 설정
def openApiGeneratedDir = "$projectDir/src/main/generated" // 생성된 코드 저장 디렉토리
def contractDir = "$projectDir/docs/contract" // OpenAPI 사양 파일 디렉터리

// 모든 OpenAPI Generator 태스크를 구성 단계에서 등록
def openApiTasks = fileTree(dir: contractDir, include: ['*.yaml', '*.yml']).collect { yamlFile ->
    def fileNameWithoutExtension = yamlFile.name.replaceFirst(/\.[^\.]+$/, '') // 확장자 제거

    tasks.register("openApiGenerate_${fileNameWithoutExtension}", GenerateTask) {
        generatorName.set("kotlin-spring")
        inputSpec.set("$contractDir/${yamlFile.name}")
        outputDir.set(openApiGeneratedDir)
        templateDir.set("$projectDir/docs/template") // 커스텀 템플릿 경로 지정

        // API별로 고유한 패키지 설정
        packageName.set("org.monsing.${fileNameWithoutExtension}") // 기본 패키지
        apiPackage.set("org.monsing.${fileNameWithoutExtension}.api") // API 클래스 패키지
        modelPackage.set("org.monsing.${fileNameWithoutExtension}.model") // 모델(DTO) 클래스 패키지

        configOptions.set([
                "dateLibrary"         : "java8",
                "useSpringBoot3"      : "true",
                "useTags"             : "true",
                "interfaceOnly"       : "true",
                "enumPropertyNaming"  : "UPPERCASE",
                "serializationLibrary": "jackson"
        ])
    }
}

// generateOpenApi 태스크가 모든 동적으로 생성된 태스크들을 실행하도록 설정
tasks.register("generateOpenApi") {
    dependsOn(openApiTasks) // 구성 단계에서 의존성 연결
    doLast {
        println("OpenAPI code generation completed.")
    }
}

// 소스 디렉터리에 생성된 코드 포함
sourceSets {
    main {
        kotlin {
            srcDirs += openApiGeneratedDir // 올바른 경로 추가
        }
    }
}
